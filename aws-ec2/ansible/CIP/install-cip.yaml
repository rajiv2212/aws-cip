- name: AG Installation
  hosts: cip-instance
  become: yes # Run tasks with root privileges

  tasks:

    - name: Transfer installer-versions.yml
      copy:
        src: ../installer-versions.yml
        dest: /tmp/installer-versions.yml
        remote_src: false
      become_user: abinitio
    


    - name: Load Global parameters
      include_vars:
        file: ../installer-versions.yml
    
    - name: Load Config parameters
      include_vars:
        file: ./config-params.yml

    - name: Copy Config File
      copy:
        src: "../Coop/coop-config.ini"
        dest: "/apps/abinitio/release/"
        remote_src: false
      become_user: abinitio
  
    - name: Display Version
      ansible.builtin.debug:
        var: cip_version

    - name: Read Coop Configuration File
      slurp:
        src: /apps/abinitio/release/coop-config.ini
      register: coop_config_file_content


    - name: Find the Installer Tar
      find:
        paths: /apps/abinitio/release/
        patterns: "CIP*{{ cip_version }}*.tgz"
      register: found_files
      delegate_to: localhost
      become: false
    - name: Display  File List
      ansible.builtin.debug:
        var: found_files

    - name: Copy files to remote host
      copy:
        src: "{{ item.path }}"
        dest: /apps/abinitio/release/
        remote_src: false
      loop: "{{ found_files.files }}"
      become_user: abinitio

    - name: Extract Folder Path
      set_fact:
        folder_path: "{{ found_files.files[0].path |  regex_replace('\\.tgz$', '')  }}"

    - name: Display  Folder Path
      ansible.builtin.debug:
        var: folder_path

    - name: Untar Files
      shell: |
        su - {{ item }} -c "tar zxvf /apps/abinitio/release/CIP*.tgz -C /apps/abinitio/release/"
      loop:
        - abinitio


    - name: Parse Coop Configuration Values
      set_fact:
        coop_config_values: "{{ (coop_config_file_content['content'] | b64decode).split('\n') | map('trim') }}"
      register: parsed_config


    - name: Read Installation Directory value from config
      set_fact:
        destination: "{{ coop_config_values | select('match', '^destination=(.*)') | map('regex_replace', '^destination=(.*)', '\\1') | first }}"
        app_hub_dest: "{{ coop_config_values | select('match', '^app_hub_dest=(.*)') | map('regex_replace', '^app_hub_dest=(.*)', '\\1') | first }}"

 
    - name: Add environment parameters to /etc/profile
      lineinfile:
        path: /etc/profile
        line: |
          export PG_HOME=$AB_HOME/lib/postgresql
          export PYTHONPATH={{ sandbox_root }}/abinitio/cip/ui/ab_python_lib/modules
          export LD_LIBRARY_PATH=$AB_HOME/lib/postgresql/lib:$LD_LIBRARY_PATH
        state: present  # Add the line if not present
      notify: Reload Profile

    - name: "Fetch JAVA_HOME"
      shell: dirname $(dirname $(readlink -f $(which java)))
      register: java_home 
    
    - name: "Get A360 instance public ip"
      ansible.builtin.command: "terraform output a360_instance_public_ip"
      register: a360_instance_public_ip
      delegate_to: localhost
      become: false
      args:
        chdir: "/var/lib/jenkins/workspace/skuad-aws-cip/aws-ec2/terraform"

    - name: Get Python Path
      shell: "which python3"
      register: python_path

    - name: Create .pgpass file
      file:
        path: /home/abinitio/.pgpass
        state: touch
        mode: 0600
        owner: abinitio

    - name: Add Postgres DB Info to pgpass
      lineinfile:
        path: /home/abinitio/.pgpass
        line: |
          {{ pgpass_entries }}
        state: present  
   # - name: Set permissions to 600 for .pgpass
   #   file:
   #     path: ~/.pgpass
   #     mode: "0600"
    
    - name: Create sandbox and UI directory
      shell: |
        sudo mkdir -p {{ sandbox_root }}/abinitio/CIP_V{{ cip_version }}
        sudo mkdir -p {{ sandbox_root }}/abinitio/cip/ui
        sudo mkdir -p {{ data_mount }}/cip
        sudo mkdir -p {{ data_mount }}/cip/data-areas
        sudo chown -R {{ item }}:{{ item }} /data
      loop:
        - abinitio

    - name: Copy files to remote host
      copy:
        src: "{{ folder_path }}/ab_python_lib.tgz"
        dest: "{{ sandbox_root }}/abinitio/cip/ui/ab_python_lib.V{{ cip_version }}.tgz"
        remote_src: true
      loop: "{{ found_files.files }}"
      become_user: abinitio

    - name: Untar Python modules
      shell: |
        su - {{ item }} -c "tar -zxvf {{ sandbox_root }}/abinitio/cip/ui/ab_python_lib.V{{ cip_version }}.tgz -C {{ sandbox_root }}/abinitio/cip/ui"
        mv {{ sandbox_root }}/abinitio/cip/ui/ab_python_lib {{ sandbox_root }}/abinitio/cip/ui/ab_python_lib.V{{ cip_version }}
      loop:
        - abinitio
    - name: Create Sym Link for Python modules
      file:
        src: "{{ sandbox_root }}/abinitio/cip/ui/ab_python_lib.V{{ cip_version }}"
        dest: "{{ sandbox_root }}/abinitio/cip/ui/ab_python_lib"
        state: link
      become_user: abinitio
    - name: Create CIP DB Instance
      ansible.builtin.command: "/apps/abinitio/release/source_and_run.sh {{ item }}"
      with_items:
        - ab-db create cipdb -U admin -p {{ cip_db_port }} -P admin -n 
        - ab-db start cipdb
      register: command_output
      become_user: abinitio
    
    - name: Create CIP DB 
      shell: |
        source /etc/profile && source $(XXurl -realpath $(m_env -g AB_DB_DATA_DIR))/cipdb/db.env && createdb cip
      register: command_output
      become_user: abinitio
        
    - name: Display DB Status
      ansible.builtin.debug:
        var: command_output

    - name: Create Abinitio environment
      ansible.builtin.command: "/apps/abinitio/release/source_and_run.sh {{ item }}"
      with_items: 
        - install-environment -root {{ sandbox_root }}/abinitio -data-mount {{ data_mount }}/cip
        - mv {{ sandbox_root }}/abinitio/sand/stdenv {{ sandbox_root }}/abinitio/stdenv
        - air project import /Projects/abinitio/stdenv -basedir  {{ sandbox_root }}/abinitio/stdenv -auto-add -create
      register: command_output
      become_user: abinitio

    - name: Display Status
      ansible.builtin.debug:
        var: command_output
        
    - name: Create Parent Directories for Project
      ansible.builtin.command: "/apps/abinitio/release/source_and_run.sh {{ item }}"
      with_items:
        - air sandbox parameter -path .sandbox.pset AI_ADMIN_PRIVATE_ROOT@ABENV {{ sandbox_root }}
        - air sandbox parameter -path .sandbox.pset AI_ADMIN_PUBLIC_ROOT@ABENV {{ sandbox_root }}
        - air sandbox parameter -path .sandbox.pset AI_DATA_MOUNT@ABENV {{ data_mount }}/cip
        - define-directories -basedir {{ sandbox_root }}/abinitio/stdenv -type both -mfs-depth 2 -subdir default
        - build-mfs -basedir {{ sandbox_root }}/abinitio/stdenv -mfs-depth 2 -data-areas {{ data_mount }}/cip/data-areas
      register: command_output
      become_user: abinitio
      args:
        chdir: "{{ sandbox_root }}/abinitio/stdenv"

    - name: Display Status
      ansible.builtin.debug:
        var: command_output

    - name: Set params in global abinitiorc
      lineinfile:
        path: "{{ destination }}/abinitio-V{{ coop_version }}/config/abinitiorc"
        line: |
         AB_ENV_ROOT : {{ sandbox_root }}/abinitio/stdenv
        state: present

    - name: Load CIP sav files
      ansible.builtin.command: "/apps/abinitio/release/source_and_run.sh {{ item }}"
      with_items:
        - create-project -rel-loc abinitio/cip/private_internal -type private -env {{ sandbox_root }}/abinitio/stdenv -checkin Y
        - create-project -rel-loc abinitio/cip/public_internal -type public -env {{ sandbox_root }}/abinitio/stdenv -checkin Y
        - air project modify /Projects/abinitio/cip/private_internal -common /Projects/abinitio/cip/public_internal
        - air promote load adc.sav -history-file adc.hist -comment '{{ cip_version }}' -no-analyze
        - air promote load engine.sav -history-file engine.hist -comment 'CIP Install {{ cip_version }}' -relocate /Projects/abinitio/cip/stdenv /Projects/abinitio/stdenv -no-analyze
        - air promote load new_customer_sandboxes_utf8.sav -history-file new_customer_sandboxes_utf8.hist -comment 'CIP Install {{ cip_version }}' -relocate /Projects/abinitio/cip/stdenv /Projects/abinitio/stdenv -relocate /Projects/abinitio/cip/private_prototype/ /Projects/abinitio/cip/private_internal -relocate /Projects/abinitio/cip/public_prototype/ /Projects/abinitio/cip/public_internal -no-analyze
      register: command_output
      become_user: abinitio
      args:
        chdir: "{{ folder_path }}"
    - name: Display Status
      ansible.builtin.debug:
        var: command_output

    - name: Checkout CIP 
      ansible.builtin.command: "/apps/abinitio/release/source_and_run.sh {{ item }}"
      with_items:
        - air project export /Projects/abinitio/cip/private_internal -basedir {{ sandbox_root }}/abinitio/cip/private_internal -parameters -export-commons -common /Projects/abinitio {{ sandbox_root }}/abinitio -common /Projects/abinitio/cip/public_internal {{ sandbox_root }}/abinitio/cip/public_internal
      register: command_output
      become_user: abinitio
    - name: Display Status
      ansible.builtin.debug:
        var: command_output


    - name: Set stdenv params
      ansible.builtin.command: "/apps/abinitio/release/source_and_run.sh {{ item }}"
      with_items:
        - air sandbox parameter -path .sandbox.pset AI_DATA_MOUNT@ABENV "{{ data_mount }}/cip"
      register: command_output
      become_user: abinitio
      args:
        chdir: "{{ sandbox_root }}/abinitio/stdenv"

    - name: Set CIP Common Params
      ansible.builtin.command: "/apps/abinitio/release/source_and_run.sh {{ item }}"
      with_items:
        - air sandbox pset dev.pset -base .project.pset
        - air sandbox pset .sandbox.pset -base dev.pset
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_PYTHONPATH "{{ sandbox_root }}/abinitio/cip/ui/ab_python_lib/modules"
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_TEST_MODE 'True'
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_COMMS_START_CUSTOMER_SERVICES 'True'
        - air sandbox parameter -path dev.pset ACT_API_BASE_PORT@ 29000
        - air sandbox parameter -path dev.pset ACT_API_SERVICE_HOST@ {{ a360_instance_public_ip.stdout }}
        - air sandbox parameter -path dev.pset ACT_API_HTTP_CONTEXT_ROOT@ active360
        - air sandbox parameter -path dev.pset ACT_API_CUSTOMER360_ENTITY_NAME@ cip_customer
        - air sandbox parameter -path dev.pset ACT_API_CUSTOMER360_SUBSET_NAME@ subset_for_cip_inbound
      register: command_output
      become_user: abinitio
      args:
        chdir: "{{ sandbox_root }}/abinitio/cip/cip_common"

    - name: Configure CIP Private Sandbox
      ansible.builtin.command: "/apps/abinitio/release/source_and_run.sh {{ item }}"
      with_items:
        - air sandbox pset dev.pset -base .project.pset
        - air sandbox pset .sandbox.pset -base dev.pset
        - air sandbox parameter -path .sandbox.pset AI_REL_LOC:sandbox@ABENV /abinitio/cip/private_internal
        - air sandbox parameter -path .sandbox.pset AI_TEST_FLAG@ABENV abinitio
        - air sandbox parameter -path .sandbox.pset Environment {{ sandbox_root }}/abinitio/stdenv
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_LOCAL_ENRICHMENT_LAYOUT@ '$CIP_COMMON_LOCAL_MFS_QUEUE'
        - air sandbox parameter -path .sandbox.pset JAVA_HOME@act_api {{ java_home.stdout }}
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_QUERY_IT_SANDBOX@ {{ sandbox_root }}/abinitio/queryit
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_QUERY_IT_DB_USERNAME@ abinitio
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_QUERY_IT_DB_USERNAME@ abIniti0
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_CUSTOMER_EVENT_OVERRIDE_TYPE_LIST@cip_common 'ET_EVENT1,ET_EVENT2,ET_EVENT3'
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_INTERNAL_EVENT_OVERRIDE_TYPE_LIST@ 'ET_TIMER, ET_CAMPAIGN_EVENT, ET_CAMPAIGN_EVENT_CAMPAIGN_ENDED, ET_NBOS_FULFILLMENT_REQUEST, ET_OUTBOUND_CHANNEL_FULFILLMENT_REQUEST, ET_NBOS_OUTBOUND_EVENT'
        #- air sandbox parameter -path ./.sandbox.pset CIP_COMMON_LOCAL_ENRICHMENT_QUEUE@ '$CIP_COMMON_LOCAL_MFS_QUEUE/cipsk-dev1.enrichment_q'
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_SEGMENTATION_MUTABLE_AB_HOME@ {{ destination }}/abinitio-V{{ coop_version }}
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_LOCAL_SEGMENTATION_LAYOUT@ {{ data_mount }}/cip/mfs/mfs_2way
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_ADC_CONFIG_FILE@ {{ sandbox_root }}/abinitio/cip/private_internal/config/config.dev.props
        - project-directories -create abinitio -proj {{ sandbox_root }}/abinitio/cip/private_internal -ignore-owner -all-commons
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_CIPDB_PORT@ {{ cip_db_port }}
        - air sandbox parameter -path .sandbox.pset CIP_COMMON_CIPDB_DB_NAME@ cip
        - mkdir {{ sandbox_root }}/abinitio/cip/private_internal/run
      register: command_output
      become_user: abinitio
      args:
        chdir: "{{ sandbox_root }}/abinitio/cip/private_internal"


    - name: Display Status
      ansible.builtin.debug:
        var: command_output
    - name: Setup CIP DB
      ansible.builtin.command: "/apps/abinitio/release/source_and_run.sh {{ item }}"
      with_items:
        - air sandbox run ../pset/utility/create_environment/create_all_databases.pset
        - air sandbox run ../pset/utility/create_environment/upgrade_all_databases.pset
        - air sandbox run ../pset/utility/create_environment/create_environment.pset
        #- air sandbox run ../pset/utility/create_environment/create_queues.pset
      register: command_output
      become_user: abinitio
      args:
        chdir: "{{ sandbox_root }}/abinitio/cip/private_internal/run"

    - name: Display Status
      ansible.builtin.debug:
        var: command_output

    - name: Create executables file
      file:
        path: "{{ sandbox_root }}/abinitio/cip/private_internal/run/executables.csv"
        state: touch
        mode: 0700
        owner: abinitio
    
    - name: Create executables script
      file:
        path: "{{ sandbox_root }}/abinitio/cip/private_internal/run/start_system.ksh"
        state: touch
        mode: 0700
        owner: abinitio

    - name: Add Psets to executables
      lineinfile:
        path: "{{ sandbox_root }}/abinitio/cip/private_internal/run/executables.csv"
        line: |
          cip-control,time_service,$AI_PSET/utility/time_service.pset,Graph
          cip-control,utility,$AI_PSET/utility/utility_plan.pset,Plan
          cip-control,contact_policy_subsystem,$AI_PSET/communication/contact_policy_subsystem.pset,Plan
          cip-control,detect_subsystem,$AI_PSET/event_engine/detect_subsystem.pset,Plan
          cip-control,fulfillment_subsystem,$AI_PSET/fulfillment/fulfillment_subsystem.pset,Plan
          cip-control,communication_subsystem,$AI_PSET/communication/communication_subsystem.pset,Plan
          cip-control,control_subsystem,$AI_PSET/control/control_plan.pset,Plan
          cip-control,enrichment_subsystem,$AI_PSET/enrichment/a360_enrich_events.pset,Graph
          #cip-control,aggregation_subsystem,$AI_PSET/enrichment/aggregation_subsystem.pset,Plan
          cip-control,nbos,$AI_PSET/inbound_channel/nbos_start_services.pset,Plan
          cip-control,collect_event_subsystem,$AI_PSET/collect_integrate/cip/collect_event_subsystem.pset,Plan
        state: present  

    - name: Prepare Start Systems script
      lineinfile:
        path: "{{ sandbox_root }}/abinitio/cip/private_internal/run/start_system.ksh"
        line: |
          ../bin/cip-control.ksh start utility
          ../bin/cip-control.ksh start control_subsystem
          ../bin/cip-control.ksh start contact_policy_subsystem
          ../bin/cip-control.ksh start detect_subsystem
          ../bin/cip-control.ksh start fulfillment_subsystem
          ../bin/cip-control.ksh start communication_subsystem
          ../bin/cip-control.ksh start enrichment_subsystem
          ../bin/cip-control.ksh start collect_event_subsystem
        state: present  
      
    
  handlers:
    - name: Reload Profile
      shell: source /etc/profile  # Command to reload the profil
